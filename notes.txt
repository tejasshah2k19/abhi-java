lang:

HL : Eng - user 
LL : binary - system 
ML : HL + LL 


HL --> user ---> | Transaltor | system --> LL  -> output 


Transaltor -> 1) compiler 
              2) interpreter 
              3) assembler 


          compiler -> whole at once 
          interpreter -> line by line 

JAVA -> compiler + interpreter -> 
            java compiled and interpreted lang 

------------------------------------------------------------------------------------


ML , DS -> 

ABC -> SETL {Math}  ->  Guido van Rossum -> problem -> python -> 

java -> lib -> ai , ds , 

--------------------------------------------------------------

java -> HL 
     -> compiled + interpreted
     -> object oriented : class , object ,encapsulation ----> 
     -> open source -- properitor  


java version => 21 1.21 

                java 6 
                java 1.6 

            tools ? software ? java 


                                JAVA
        JDK                                     JRE 
        java development kit                    java runtime enrviornment 



        java install-> jdk -> {jre}
        computer -> java app run -> how? 
        os -> jre ->

        JDK:JRE   


        text editor -> notepad -> IDE -> software -> eclipse ->  
                        visual code VSCODE->
                        notepad++
                        sublime 
                        extension=>  
                        
    JDK -> develop
            javac 
            java 
            javadoc 
            jdb 
            javah 
            appletviewer 
            XXXX 

    JRE -> execute 
        class loader 
        JIT : just in time 
        JVM : java virtual machine 

-----------------------------------------------------------------------------------------

code ? 

java -> .java 
     -> class:object 

how to run java code ? 
    1) compile -> javac -> java file -> {sysntax , link } { .class }{bytecode}
    2) execute -> java -> class file -> bytecode->systemcode->output  

-----------------------------------------------------------------------------
POP 
OOP  --> java 


class  -> blue print -> group -> logical ->  general 
object -> member - physical - special 

class -> property -> 
            data member      : variable 
            member function  : method 

Dog ->      object : peter:xyz      sam:abc  
    leg                 leg         leg 
    mouth               mouth       mouth 
    eyes                eyes        eyes 
    walk()              
    run()
    
HB -> 
Men ->  Abhi 
Laptop -> Legion Y 520 
Mobile -> iphone 13 pro max dhiraj sir 

Bank 
Mercedez Benz 
Bottle 
Projector 
Dzire
Mobile 
Iphone 
Iphone15 
--------------------------------------------------------------
class : property : object 
--------------------------------------------------------------

java -> class -> main() -> ClassName.java 


naming convention -> 
class  : 
        first character is in upper and rest are in lower 
        if it contains multiple words then 
            first character of each world should be in upper 

variable : 
        first character should be in lower 
        if it contains multiple word then 
                from second word first character of 
                        each word is in upper 
        e.g : salary , maxSalary , totalSalary , totalDeductSalary   

method : 
        same as variable  
        we have () bracket in methods 

-----------------------------------------------------------------

calculator -> class , variable , method , object --> 

calculator class 
    add()
    sub()
    mul() 

main -> calling -> 
-----------------------------------------------------------------

Scanner - class is responsible to read input from users - using console , file , String , XXX   

name:string  
number : 
alNum  : 


methods -> 

class->object-> 
    need to create object of scanner class 

we must import Scanner class before use 

import XXXXX ; 
import java.util.Scanner;  



--------------------------------------------------------

Banking Application
Objective: Develop a Java program that simulates basic banking operations using classes, 
        objects, and methods.

Requirements:

Define a BankAccount class with the following attributes:

accountNumber  : The account's unique identifier.
accountHolder (String): The name of the account holder.
balance (double): The current balance of the account.
Implement the following methods within the BankAccount class:

deposit(double amount): Adds the specified amount to the account balance.
withdraw(double amount): Subtracts the specified amount from the account balance, ensuring that the balance does not become negative.
displayAccountInfo(): Prints the account number, account holder's name, and current balance.
----------------------------------------------------------------------------------------


              java 
primitive               non primitive
8                       <>
number-whole number         class,object,array,enum, 
byte                        String : multiple characters 
short
int 
long 

number-fraction-real number
float 
double 

character->
char->single character 

true-false 
boolean 
------------------------------------------------------------------------------------------

constructor -> special method -> 
                    which has same name as class name 
                    it does not have any return type 
                    which is used to initlialize/assign values to the instance/class variable 
                    it will call automatically when we create object , we dont need to invoke it 

                    () -> no argument , default constructor 
                    (int x,.....) argument , parameterized constructor 
------------------------------------------------------------------------------------------

Car Management System :- 

You are tasked with developing a Car Management System that allows a user to manage car information. The system should be able to store and display information about different cars.

Requirements:
Create a Car class with the following attributes:

model (String): The model of the car.
color (String): The color of the car.
year (int): The manufacturing year of the car.
The Car class should include:

A constructor that initializes the car's model, color, and year.
A method displayInfo() that prints the car's details in a formatted manner.
In the main program, the user should be able to:

Create multiple car objects.
Call the displayInfo() method on each car object to show its details.
Example Scenario:
Create a car with the model "Tesla Model S", color "Red", and year 2023.
Create another car with the model "Ford Mustang", color "Blue", and year 2022.
Display the information of both cars.


output : 
Car Model: Tesla Model S
Color: Red
Year: 2023

Car Model: Ford Mustang
Color: Blue
Year: 2022
------------------------------------------------------------------------------------------

multiple characters -> String class 

we do no required to import 

String class belongs to java.lang package. 

java.lang -> 


String str = "royal"; 
String str = new String("royal");


concat
toUpperCase
toLowerCase 

equals() -> value -> case sensitive 
equalsIgnoreCase()

compareTo()
compareToIgnoreCase()

length() -> total characters 

trim() -> "  royal edu  "; 
split(" ") => "royal edu ahmedabad"

String -> immutable -> self -> new -> apply 


1) take email and password from user and print valid if 
        email is admin@gmail.com and password is AdminSecret 
        otherwise print invalid 
e.g : enter email and password 
      ram@ravan.com 
      AdminSecret 
      Invalid 

2) take string from user and reverse it and print it 
    input :  royal 
    output : layor 
    
3) take string from user and print its palindrome or not 
    input : royal 
    output : notpalindrome 

    input : madam 
    output : palindrome 

4) take string with multiple words and check how many words are greater than 3 in size ( > 3 )  
    input: jony jony yes papa 
    output : 3 




---------------------------------------------------------
mutable -> 
        StringBuffer , StringBuilder 

----------------------------------------------------------------------

Define a Book class with title, author, and ISBN as attributes. 
Include methods to display book information.

Create a Library class that manages a a Book object. 
create two method ,1 add  that create book and 2 print that print all the information of a book.

-------------------------------------------------------------------------


int a; // we can store single integer value in variable a 
a=10;

a=20; 


int a[]; //size 
a = new int[10]; 

int a[] = new int[10];//10 copy 

array -> index -> 0 start , size-1 

a[0] ,a[1] , a[2].......a[9]

0 to 9 => 10 copy 

a[10] -> runtime error 

before use of arary you must provide size

----------------------------------------------------

Library => book ? 

collection -> ArrayList -> dynmic array 

you dont need to mention size when u create array list -> 

ArrayList -> class -> import 

import java.util.ArrayList 

indian team -> 11 player 
collection -> list queue set  map
              ArrayList   

When we create ArrayList -> we need to pass Data Type for generic 

---------------------------------------------------------

q: create a list of five string and remove all the string who's length is less than 5 


---------------------------------------------------------

create class Product with productName , price , year 
write three methods for this class 
first method will read all product information from user 
second method will print all the product information 
third method will increase the product price by 10% 

create class ProductMenu which contains main method and 1 menu for above three method 
user will select choice and then method will call as per choice; 

--------------------------------------------------

1.  Add Name 
2.  List All Name 
3.  Remove Name 
4.  Search Name
5.  Exit 

1
enter name 
royal

1.  Add Name 
2.  List All Name 
3.  Remove Name 
4.  Search Name
5.  Exit 

-------------------------------------------------------------------------------------

Method OverLoading :- 

class  
    void add() 
    void add(int a) // argument must be unique 
    void add(int j,int h) 

    class can have more than 1 method with same name. 
    but argument must be unique. 

    ArrayList 
            remove(int) -> index 
            remove(element) -> data 
--------------------------------------------------------------------------------------
Constructor OverLoading :- 
    class User 

            User(){
                //no argument 
            }
            User(String name){
                //parameterized constructor 
            }
---------------------------------------------------------------------------------------
code reuse -> Inheritance ->
    Inheritance is the process by which object of 1 class can access 
    property of another class 

    class Calc -> add() , sub() , mul() 

    class SciCalc -> sin() cos() 


    Calc obj -> add() sub() mul()
    SciCalc obj -> sin() cos() 


    extends keyword is used to achieve Inheritance

    SciCalc extends Calc 


    we have 5 types of Inheritance in OOP 
    java supports all 5 but 1 indeirectly 

    single level Inheritance
    multi level Inheritance
    multiple Inheritance** 
    hirerchical Inheritance
    hybrid Inheritance  { combine atleast any two type }

    Calc 


    SciCalc extends Calc 

    class -> giver -> Parent class {super,base} 
    class -> taker -> Child class  {sub,derived}


    super keyword is used to access parent's property 
    this keyword is used to access own class's property 
        this always refere current class -> object 
----------------------------------------------------------------------------------------    

Polymorphism => more than 1 form 
    1) overloading -> compile time Polymorphism
    2) overriding -> runtime Polymorphism 


----------------------------------------------------------------------------------------    
    Access Modifier -> 
            private 
            default ---> implicitly -> you can write manually 
            protected 
            public 

----------------------------------------------------------------------------------------    
Package -> folder 

    Scanner 
    System 
    Math 
    String 
    Date 
    Date 
    Calendar 
    Applet 
    File 
    FileOutputStream 

            java 
                lang
                    String 
                    Math 
                    System  
                util 
                    Date 
                    Calendar
                io 
                    File 
                    FileOutputStream 
                applet
                    Applet 
                    Graphic 
                    Button 
                security

                net 

                sql
                    Date 
                    Connection 

    
    you must have to import then use 

    import java.sql.Date 


-----------------------------------------------------------------------------------------

inheritance 
    SingleLevelInhertianceDemo.java 

package inheritance;

class SingleLevelInhertianceDemo{

}

-----------------------------------------------------------------------------------------

error -> 
        1) compiletime error 
        2) runtime error 

        javac -> java compile -> .class -> not run 
        sysntax error , variable use without declare , semicoln 

        java -> .class -> run -> runtime error 
        exception -> runtime error 

        crash -> 

        exception handeling 



        try -> code -> area 
        hit -> create object {runtime error - exception }
        throw -> object 
        catch -> handeling 


        try---catch 

        / by zero 
        integer -> real 






-------------------------------------------------------------------------------------------        
                Object 
                
                Throwable 
                
                Exception 
                            RuntimeException 
        IoException             ArithmeticException                      
                                InputmismatchException    

   1) checked exception -> force 
   2) unchecked exception -> 
---------------------------------------------------------------------------------------------


java.io.* 

    file create -- folder  
    file rename --folder 
    file remove --folder 
    file exists ? --folder 
    file size? --folder 
    file read --folder file list 
    file write --folder -> file create 
    file copy --


    File class -> create , rename , size , remove , exists , hidden?attributes? , 
---------------------------------------------------------------------------------------------

encapsulation :-
    variable -> restricted , less accessible 
    private / protected 
    method  -> public 
            private variable -> public getter and setter 
---------------------------------------------------------------------------------------------

Polymorphic object -> 

//                  Bike 
    //              1  3 4 
//  Pulsar      Yuzdi       Boxer       Bullet 
//   1  2 3     1 5 4 3     1 2 3 6    1 2 5 9 7 

//Bike b = new Pulsar() 
//1 3 4 

//Bike b =new Boxer()
//1 3 4  

//Bike y = new Yuzdi()
//1 3 4  

//Boxer b = new Pulsar();

//Parent p = new Child();

//Pular p = new Bike();  

        
        Bike b = new Pulser();//polymorphic object 
        b.start();  //compiletime:Parent class -> Bike  runtime:child -> Pulser  
        b.stop();
        //b.disc();
//javac XXX.java -> compile -> .class ->Bike 

//java XXX -> runtime -> .class -> run -> memory -> Pulser   
----------------------------------------------------------------------
abstract -> no logic -> only declration 

interface -> pure abstract class 
                all the methods are by default abstract 

----------------------------------------------------------------------------------

Queue 
Map 
HashTable 
Enum 
RegEx , Pattern , Matcher 

----------------------------------------------------------------------------------

List :: ArrayList -> 10 20 30 40  60 70 40  
        add() get(index) unsorted remove(index) size() clear() 
        [     ]:10 ::5 used
        [            ]:15 ::10 used  
        [                 ]:22
        grow ? 

Queue :: LinkedList ->
            [] [] [] [] [] [] [] [] 


Queue :: PriorityQueue -> 

Map  ::  HashMap -> 
        only value ?
        allows value with key -> 
        in map we will store key : value pair data 

hashFunction -> key 

        10 20 30 40  60 70 40  


modulo method -> 

10%13 -> 10
20%13 -> 7 
30%13 -> 4
..
..
.
.
.

search 30 -> ? 30%13 => 4 


keys are always unique -> 
values can be duplicate -> 
-------------------------------------------------------------------

Enum 
RegEx , Pattern , Matcher 



-------------------------------------------------------------------

constant -> fix value 

int a; 
a=10;
a=20; 


final int a=20;//constant variable 
a=10; //error 

all capital 

final int BRANCH_CODE = 10025; 


enum -> collection of constant -> 
we can treat enum like class in java 


class Drink{

}


enum Drink{


}

---------------------------------------------------------------