lang:

HL : Eng - user 
LL : binary - system 
ML : HL + LL 


HL --> user ---> | Transaltor | system --> LL  -> output 


Transaltor -> 1) compiler 
              2) interpreter 
              3) assembler 


          compiler -> whole at once 
          interpreter -> line by line 

JAVA -> compiler + interpreter -> 
            java compiled and interpreted lang 

------------------------------------------------------------------------------------


ML , DS -> 

ABC -> SETL {Math}  ->  Guido van Rossum -> problem -> python -> 

java -> lib -> ai , ds , 

--------------------------------------------------------------

java -> HL 
     -> compiled + interpreted
     -> object oriented : class , object ,encapsulation ----> 
     -> open source -- properitor  


java version => 21 1.21 

                java 6 
                java 1.6 

            tools ? software ? java 


                                JAVA
        JDK                                     JRE 
        java development kit                    java runtime enrviornment 



        java install-> jdk -> {jre}
        computer -> java app run -> how? 
        os -> jre ->

        JDK:JRE   


        text editor -> notepad -> IDE -> software -> eclipse ->  
                        visual code VSCODE->
                        notepad++
                        sublime 
                        extension=>  
                        
    JDK -> develop
            javac 
            java 
            javadoc 
            jdb 
            javah 
            appletviewer 
            XXXX 

    JRE -> execute 
        class loader 
        JIT : just in time 
        JVM : java virtual machine 

-----------------------------------------------------------------------------------------

code ? 

java -> .java 
     -> class:object 

how to run java code ? 
    1) compile -> javac -> java file -> {sysntax , link } { .class }{bytecode}
    2) execute -> java -> class file -> bytecode->systemcode->output  

-----------------------------------------------------------------------------
POP 
OOP  --> java 


class  -> blue print -> group -> logical ->  general 
object -> member - physical - special 

class -> property -> 
            data member      : variable 
            member function  : method 

Dog ->      object : peter:xyz      sam:abc  
    leg                 leg         leg 
    mouth               mouth       mouth 
    eyes                eyes        eyes 
    walk()              
    run()
    
HB -> 
Men ->  Abhi 
Laptop -> Legion Y 520 
Mobile -> iphone 13 pro max dhiraj sir 

Bank 
Mercedez Benz 
Bottle 
Projector 
Dzire
Mobile 
Iphone 
Iphone15 
--------------------------------------------------------------
class : property : object 
--------------------------------------------------------------

java -> class -> main() -> ClassName.java 


naming convention -> 
class  : 
        first character is in upper and rest are in lower 
        if it contains multiple words then 
            first character of each world should be in upper 

variable : 
        first character should be in lower 
        if it contains multiple word then 
                from second word first character of 
                        each word is in upper 
        e.g : salary , maxSalary , totalSalary , totalDeductSalary   

method : 
        same as variable  
        we have () bracket in methods 

-----------------------------------------------------------------

calculator -> class , variable , method , object --> 

calculator class 
    add()
    sub()
    mul() 

main -> calling -> 
-----------------------------------------------------------------

Scanner - class is responsible to read input from users - using console , file , String , XXX   

name:string  
number : 
alNum  : 


methods -> 

class->object-> 
    need to create object of scanner class 

we must import Scanner class before use 

import XXXXX ; 
import java.util.Scanner;  



--------------------------------------------------------

Banking Application
Objective: Develop a Java program that simulates basic banking operations using classes, 
        objects, and methods.

Requirements:

Define a BankAccount class with the following attributes:

accountNumber  : The account's unique identifier.
accountHolder (String): The name of the account holder.
balance (double): The current balance of the account.
Implement the following methods within the BankAccount class:

deposit(double amount): Adds the specified amount to the account balance.
withdraw(double amount): Subtracts the specified amount from the account balance, ensuring that the balance does not become negative.
displayAccountInfo(): Prints the account number, account holder's name, and current balance.
----------------------------------------------------------------------------------------


              java 
primitive               non primitive
8                       <>
number-whole number         class,object,array,enum, 
byte                        String : multiple characters 
short
int 
long 

number-fraction-real number
float 
double 

character->
char->single character 

true-false 
boolean 
------------------------------------------------------------------------------------------

constructor -> special method -> 
                    which has same name as class name 
                    it does not have any return type 
                    which is used to initlialize/assign values to the instance/class variable 
                    it will call automatically when we create object , we dont need to invoke it 

                    () -> no argument , default constructor 
                    (int x,.....) argument , parameterized constructor 
------------------------------------------------------------------------------------------

Car Management System :- 

You are tasked with developing a Car Management System that allows a user to manage car information. The system should be able to store and display information about different cars.

Requirements:
Create a Car class with the following attributes:

model (String): The model of the car.
color (String): The color of the car.
year (int): The manufacturing year of the car.
The Car class should include:

A constructor that initializes the car's model, color, and year.
A method displayInfo() that prints the car's details in a formatted manner.
In the main program, the user should be able to:

Create multiple car objects.
Call the displayInfo() method on each car object to show its details.
Example Scenario:
Create a car with the model "Tesla Model S", color "Red", and year 2023.
Create another car with the model "Ford Mustang", color "Blue", and year 2022.
Display the information of both cars.


output : 
Car Model: Tesla Model S
Color: Red
Year: 2023

Car Model: Ford Mustang
Color: Blue
Year: 2022
------------------------------------------------------------------------------------------

multiple characters -> String class 

we do no required to import 

String class belongs to java.lang package. 

java.lang -> 


String str = "royal"; 
String str = new String("royal");


concat
toUpperCase
toLowerCase 

equals() -> value -> case sensitive 
equalsIgnoreCase()

compareTo()
compareToIgnoreCase()

length() -> total characters 

trim() -> "  royal edu  "; 
split(" ") => "royal edu ahmedabad"

String -> immutable -> self -> new -> apply 


1) take email and password from user and print valid if 
        email is admin@gmail.com and password is AdminSecret 
        otherwise print invalid 
e.g : enter email and password 
      ram@ravan.com 
      AdminSecret 
      Invalid 

2) take string from user and reverse it and print it 
    input :  royal 
    output : layor 
    
3) take string from user and print its palindrome or not 
    input : royal 
    output : notpalindrome 

    input : madam 
    output : palindrome 

4) take string with multiple words and check how many words are greater than 3 in size ( > 3 )  
    input: jony jony yes papa 
    output : 3 




---------------------------------------------------------
mutable -> 
        StringBuffer , StringBuilder 

----------------------------------------------------------------------

Define a Book class with title, author, and ISBN as attributes. 
Include methods to display book information.

Create a Library class that manages a a Book object. 
create two method ,1 add  that create book and 2 print that print all the information of a book.

-------------------------------------------------------------------------


int a; // we can store single integer value in variable a 
a=10;

a=20; 


int a[]; //size 
a = new int[10]; 

int a[] = new int[10];//10 copy 

array -> index -> 0 start , size-1 

a[0] ,a[1] , a[2].......a[9]

0 to 9 => 10 copy 

a[10] -> runtime error 

before use of arary you must provide size

----------------------------------------------------

Library => book ? 

collection -> ArrayList -> dynmic array 

you dont need to mention size when u create array list -> 

ArrayList -> class -> import 

import java.util.ArrayList 

indian team -> 11 player 
collection -> list queue set  map
              ArrayList   

When we create ArrayList -> we need to pass Data Type for generic 




